THREE.MaskPass=function(scene,camera){THREE.Pass.call(this);this.scene=scene;this.camera=camera;this.clear=!0;this.needsSwap=!1;this.inverse=!1};THREE.MaskPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.MaskPass,render:function(renderer,writeBuffer,readBuffer,delta,maskActive){var context=renderer.context;var state=renderer.state;state.buffers.color.setMask(!1);state.buffers.depth.setMask(!1);state.buffers.color.setLocked(!0);state.buffers.depth.setLocked(!0);var writeValue,clearValue;if(this.inverse){writeValue=0;clearValue=1}else{writeValue=1;clearValue=0}
state.buffers.stencil.setTest(!0);state.buffers.stencil.setOp(context.REPLACE,context.REPLACE,context.REPLACE);state.buffers.stencil.setFunc(context.ALWAYS,writeValue,0xffffffff);state.buffers.stencil.setClear(clearValue);renderer.render(this.scene,this.camera,readBuffer,this.clear);renderer.render(this.scene,this.camera,writeBuffer,this.clear);state.buffers.color.setLocked(!1);state.buffers.depth.setLocked(!1);state.buffers.stencil.setFunc(context.EQUAL,1,0xffffffff);state.buffers.stencil.setOp(context.KEEP,context.KEEP,context.KEEP)}});THREE.ClearMaskPass=function(){THREE.Pass.call(this);this.needsSwap=!1};THREE.ClearMaskPass.prototype=Object.create(THREE.Pass.prototype);Object.assign(THREE.ClearMaskPass.prototype,{render:function(renderer,writeBuffer,readBuffer,delta,maskActive){renderer.state.buffers.stencil.setTest(!1)}})