THREE.EffectComposer=function(renderer,renderTarget){this.renderer=renderer;if(renderTarget===undefined){var parameters={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat,stencilBuffer:!1};var size=renderer.getSize();renderTarget=new THREE.WebGLRenderTarget(size.width,size.height,parameters)}
this.renderTarget1=renderTarget;this.renderTarget2=renderTarget.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.passes=[];if(THREE.CopyShader===undefined)
console.error("THREE.EffectComposer relies on THREE.CopyShader");this.copyPass=new THREE.ShaderPass(THREE.CopyShader)};Object.assign(THREE.EffectComposer.prototype,{swapBuffers:function(){var tmp=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=tmp},addPass:function(pass){this.passes.push(pass);var size=this.renderer.getSize();pass.setSize(size.width,size.height)},insertPass:function(pass,index){this.passes.splice(index,0,pass)},render:function(delta){var maskActive=!1;var pass,i,il=this.passes.length;for(i=0;i<il;i ++){pass=this.passes[i];if(pass.enabled===!1)continue;pass.render(this.renderer,this.writeBuffer,this.readBuffer,delta,maskActive);if(pass.needsSwap){if(maskActive){var context=this.renderer.context;context.stencilFunc(context.NOTEQUAL,1,0xffffffff);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,delta);context.stencilFunc(context.EQUAL,1,0xffffffff)}
this.swapBuffers()}
if(THREE.MaskPass!==undefined){if(pass instanceof THREE.MaskPass){maskActive=!0}else if(pass instanceof THREE.ClearMaskPass){maskActive=!1}}}},reset:function(renderTarget){if(renderTarget===undefined){var size=this.renderer.getSize();renderTarget=this.renderTarget1.clone();renderTarget.setSize(size.width,size.height)}
this.renderTarget1.dispose();this.renderTarget2.dispose();this.renderTarget1=renderTarget;this.renderTarget2=renderTarget.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2},setSize:function(width,height){this.renderTarget1.setSize(width,height);this.renderTarget2.setSize(width,height);for(var i=0;i<this.passes.length;i ++){this.passes[i].setSize(width,height)}}});THREE.Pass=function(){this.enabled=!0;this.needsSwap=!0;this.clear=!1;this.renderToScreen=!1};Object.assign(THREE.Pass.prototype,{setSize:function(width,height){},render:function(renderer,writeBuffer,readBuffer,delta,maskActive){console.error("THREE.Pass: .render() must be implemented in derived pass.")}})